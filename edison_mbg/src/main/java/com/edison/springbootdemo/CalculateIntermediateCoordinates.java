package com.edison.springbootdemo;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class CalculateIntermediateCoordinates {


    static BigDecimal earthRadius = new BigDecimal("6371000");

    static BigDecimal haversineDistance(Coordinate coord1, Coordinate coord2) {
        BigDecimal dLat = (coord2.latitude.subtract(coord1.latitude))
                .divide(new BigDecimal("180.0"),10, RoundingMode.HALF_EVEN )
                .multiply(BigDecimal.valueOf(Math.PI));
        BigDecimal dLon = (coord2.longitude.subtract(coord1.longitude))
                .divide(new BigDecimal("180.0"),10, RoundingMode.HALF_EVEN )
                .multiply(BigDecimal.valueOf(Math.PI));
        BigDecimal a = new BigDecimal(Math.sin(dLat.divide(new BigDecimal(2)).doubleValue()))
                .multiply(new BigDecimal(Math.sin(dLat.divide(new BigDecimal(2)).doubleValue())))
                .add(new BigDecimal(Math.cos(coord1.latitude.multiply(new BigDecimal(Math.PI / 180)).setScale(6,RoundingMode.HALF_EVEN).doubleValue()))
                        .multiply(new BigDecimal(Math.cos(coord2.latitude.multiply(new BigDecimal(Math.PI / 180)).setScale(6,RoundingMode.HALF_EVEN).doubleValue())))
                        .multiply(new BigDecimal(Math.sin(dLon.divide(new BigDecimal(2)).doubleValue())))
                        .multiply(new BigDecimal(Math.sin(dLon.divide(new BigDecimal(2)).doubleValue()))));
        BigDecimal c = new BigDecimal(2).multiply(new BigDecimal(Math.atan2(Math.sqrt(a.doubleValue()), Math.sqrt(1 - a.doubleValue()))));
        return earthRadius.multiply(c);
    }

    public static void calculateIntermediateCoordinates(List<Coordinate> inputCoordinates,
                                                        List<Coordinate> outputCoordinates,
                                                        double interval,double orgInterval) {

//        outputCoordinates.add(inputCoordinates.get(0)); // Add the starting coordinate
//        System.out.println("调用calculateIntermediateCoordinates-"+inputCoordinates.size());
        if(inputCoordinates.size()<2){
            return;
        }

        Coordinate prevCoord = inputCoordinates.get(0);
        Coordinate currentCoord = inputCoordinates.get(1);
        BigDecimal distance = haversineDistance(prevCoord, currentCoord);


        if(Math.abs(distance.doubleValue() - interval)<0.01){
            outputCoordinates.add(currentCoord);
            inputCoordinates.remove(0);
        }else if (distance.doubleValue() > interval) {
            BigDecimal ratio = BigDecimal.valueOf(interval).divide( distance,10,RoundingMode.HALF_EVEN);
            BigDecimal newLongitude = prevCoord.longitude.add(currentCoord.longitude.subtract(prevCoord.longitude).multiply(ratio));
            BigDecimal newLatitude = prevCoord.latitude.add(currentCoord.latitude.subtract(prevCoord.latitude).multiply(ratio));

            //生成一个新的点加入到
            Coordinate newCoordinate=new Coordinate(newLongitude, newLatitude);
            outputCoordinates.add(newCoordinate);
            interval=orgInterval;//恢复原始值
            inputCoordinates.set(0,newCoordinate);
                //重新计算，然后跳出
        }else{
            inputCoordinates.remove(0);
            //重新计算，然后跳出
            interval=interval-distance.doubleValue();
        }
        calculateIntermediateCoordinates(inputCoordinates,outputCoordinates,interval,orgInterval);

    }

    public static void main(String[] args) {

        //根据高德路径规划结果生成桩号
        //1 转换string为经纬度list
        String polyline="114.397988,36.222251;114.39799,36.222245;114.398091,36.221923;114.398322,36.221199;114.398531,36.220593;114.399245,36.218608;114.399797,36.217261;114.400151,36.216548;114.400521,36.215835;114.401525,36.213968;114.402185,36.212809;114.403311,36.210985;114.403343,36.210937;114.403735,36.210384;114.403901,36.210143;114.405698,36.20759;114.40757,36.204934;114.408563,36.203491;114.40911,36.202703;114.409598,36.201919;114.409689,36.201769;114.40999,36.201254;114.410757,36.199951;114.410918,36.199671;114.41162,36.198346;114.412173,36.197285;114.412522,36.196512;114.41353,36.194103;114.413922,36.193079;114.414517,36.19125;114.41463,36.190911;114.414759,36.190413;114.415011,36.189366;114.415107,36.188964;114.415413,36.18765;114.415708,36.186089;114.415858,36.1853;114.416095,36.183331;114.416261,36.180896;114.416255,36.177978;114.416255,36.177806;114.4161,36.175483;114.415875,36.173697;114.415799,36.173102;114.415429,36.171004;114.41529,36.170146;114.41514,36.169266;114.414914,36.168048;114.414743,36.166991;114.41471,36.166798;114.414501,36.165591;114.413729,36.160887;114.41301,36.156799;114.412876,36.156005;114.412484,36.153698;114.41162,36.14872;114.411105,36.145706;114.411009,36.145019;114.410939,36.144552;114.4108,36.143372;114.410725,36.142261;114.410655,36.141226;114.410617,36.139166;114.410666,36.137503;114.410778,36.135819;114.410902,36.134601;114.410977,36.134033;114.4111,36.133137;114.411299,36.131994;114.41162,36.130449;114.411647,36.13032;114.411921,36.129215;114.412173,36.128303;114.412479,36.127273;114.412838,36.126141;114.413707,36.12377;114.414024,36.123046;114.41441,36.122172;114.417586,36.115321;114.419088,36.11206;114.419265,36.111674;114.419549,36.111041;114.419882,36.110295;114.420697,36.108551;114.420869,36.108187;114.421207,36.107468;114.421351,36.107157;114.42169,36.106363;114.422081,36.105553;114.422843,36.103901;114.424141,36.101074;114.42634,36.09631;114.426839,36.095226;114.427708,36.093183;114.427928,36.092662;114.428502,36.091133;114.428856,36.090087;114.429033,36.089561;114.429339,36.088596;114.42943,36.088306;114.42987,36.086745;114.430321,36.084937;114.430637,36.083425;114.430825,36.082443;114.431013,36.081306;114.431249,36.079595;114.431308,36.079101;114.431394,36.078216;114.431523,36.07658;114.431603,36.074584;114.431619,36.074053;114.431614,36.072943;114.431571,36.071103;114.431442,36.069155;114.431356,36.068227;114.431345,36.068115;114.431265,36.067401;114.431072,36.065921;114.430868,36.064563;114.43053,36.062155;114.430015,36.058888;114.429752,36.057128;114.429028,36.05229;114.428331,36.047665;114.42825,36.04714;114.428105,36.046314;114.428084,36.046142;114.42795,36.04515;114.427735,36.043669;114.427515,36.042317;114.427242,36.040434;114.427054,36.039163;114.426898,36.038101;114.4267,36.036679;114.426453,36.035156;114.426292,36.034142;114.425901,36.031524;114.425428,36.02874;114.425337,36.028118;114.4253,36.027855;114.425139,36.026669;114.425096,36.026444;114.425058,36.026213;114.424978,36.025677;114.424769,36.024169;114.424758,36.0241;114.42471,36.023692;114.42464,36.023096;114.424495,36.022179;114.424071,36.019191;114.423964,36.018478;114.423803,36.017394;114.423449,36.015012;114.423256,36.01372;114.423175,36.013183;114.422902,36.011321;114.422473,36.008484;114.422205,36.006837;114.422097,36.006166;114.422086,36.006086;114.421974,36.005394;114.421829,36.004246;114.421615,36.002969;114.421496,36.002197;114.42118,36.000083;114.420804,35.998093;114.420472,35.996521;114.420354,35.99599;114.420246,35.995502;114.419678,35.993201;114.419388,35.992144;114.419115,35.99121;114.418986,35.990792;114.418117,35.988136;114.417484,35.986404;114.41684,35.984757;114.416116,35.983035;114.414909,35.980224;114.412195,35.97391;114.41162,35.972585;114.411395,35.972065;114.410387,35.969844;114.410178,35.96934;114.410135,35.969238;114.409464,35.967618;114.408445,35.965236;114.406605,35.960998;114.405425,35.958251;114.404078,35.955102;114.402823,35.952227;114.401471,35.949062;114.400945,35.947801;114.400736,35.947265;114.400425,35.94646;114.39998,35.945253;114.399738,35.944518;114.399057,35.942378;114.398869,35.94174;114.398392,35.93998;114.398108,35.938784;114.397786,35.937325;114.397614,35.936456;114.397582,35.936279;114.397367,35.935098;114.396809,35.931418;114.396214,35.927588;114.395994,35.92628;114.395876,35.925448;114.395855,35.925292;114.39579,35.924826;114.395667,35.923957;114.395463,35.92254;114.395334,35.921655;114.395146,35.920518;114.395045,35.919912;114.394926,35.919209;114.394803,35.918394;114.394685,35.917584;114.394599,35.917063;114.394551,35.916768;114.394181,35.914306;114.393135,35.907633;114.392582,35.90398;114.39248,35.90332;114.392046,35.900568;114.391289,35.8956;114.391026,35.894179;114.39085,35.89332;114.390624,35.89235;114.390619,35.892333;114.390345,35.891218;114.390029,35.890032;114.389648,35.888788;114.389036,35.886942;114.388661,35.885885;114.388344,35.885065;114.387674,35.883461;114.387068,35.882087;114.386719,35.881347;114.386526,35.880939;114.381408,35.870361;114.381371,35.870286;114.38106,35.869636;114.380281,35.868033;114.37709,35.861445;114.376146,35.859375;114.376092,35.859262;114.375056,35.857218;114.372498,35.851896;114.370797,35.848388;114.369156,35.844987;114.368678,35.844038;114.367949,35.842664;114.367675,35.842181;114.36715,35.841259;114.366114,35.839564;114.364676,35.837402;114.3645,35.837139;114.36377,35.83612;114.362804,35.834832;114.362177,35.834022;114.361672,35.8334;114.359478,35.830761;114.355836,35.826415;114.348744,35.817945;114.346641,35.815429;114.345933,35.814576;114.345703,35.814303;114.34559,35.814168;114.345139,35.813627;114.343718,35.811926;114.341583,35.809421;114.341121,35.808836;114.339598,35.807012;114.338766,35.805988;114.338026,35.805038;114.337575,35.804443;114.337329,35.804116;114.336052,35.802249;114.334866,35.800355;114.33447,35.799679;114.333611,35.79814;114.333021,35.796981;114.332388,35.795677;114.331911,35.794615;114.331487,35.793607;114.331428,35.793456;114.33073,35.791627;114.330333,35.790447;114.329931,35.789181;114.329486,35.787496;114.329126,35.786016;114.328966,35.785233;114.32867,35.783607;114.328477,35.78247;114.326659,35.771908;114.326584,35.771484;114.326535,35.77121;114.326375,35.770454;114.326219,35.769606;114.326074,35.76849;114.325527,35.765325;114.324787,35.760996;114.324695,35.760497;114.324293,35.758201;114.324164,35.757461;114.324041,35.756726;114.323837,35.75553;114.323767,35.755117;114.32373,35.754876;114.323349,35.752725;114.322877,35.749983;114.322802,35.749511;114.3227,35.748873;114.322029,35.745284;114.321611,35.742843;114.321198,35.740402;114.320887,35.738525;114.320817,35.73809;114.320581,35.736701;114.320318,35.735263;114.320023,35.733901;114.319814,35.733026;114.31953,35.73198;114.31917,35.730763;114.318827,35.729706;114.318033,35.727538;114.317936,35.727286;114.317486,35.726219;114.317078,35.725318;114.316601,35.724347;114.316139,35.723451;114.31549,35.722265;114.314814,35.721133;114.314042,35.719889;114.313291,35.718773;114.312604,35.717802;114.311912,35.716879;114.31166,35.716552;114.309476,35.713704;114.303265,35.705566;114.302669,35.704777;114.301757,35.703586;114.301017,35.702631;114.298233,35.698973;114.297476,35.697986;114.296913,35.69723;114.296425,35.696607;114.296076,35.696156;114.295454,35.695325;114.29488,35.69458;114.294252,35.693764;114.293909,35.693324;114.293512,35.692809;114.293228,35.692412;114.292075,35.690942;114.291302,35.689923;114.286667,35.683835;114.286479,35.683593;114.285546,35.682429;114.284741,35.68148;114.283486,35.680069;114.282542,35.679082;114.281335,35.677885;114.279785,35.67641;114.27906,35.675718;114.277193,35.673943;114.276668,35.673449;114.276287,35.673084;114.275783,35.672607;114.275075,35.671931;114.274737,35.671615;114.274538,35.671459;114.273599,35.670515;114.269415,35.66654;114.267822,35.665016;114.266443,35.663707;114.26581,35.663106;114.265327,35.662645;114.26426,35.66162;114.263933,35.661304;114.2619,35.659367;114.257812,35.655478;114.257184,35.654872;114.255902,35.653654;114.255001,35.652791;114.254057,35.651868;114.253086,35.650854;114.252887,35.650634;114.252367,35.650066;114.251621,35.649229;114.250886,35.648365;114.250028,35.647308;114.249197,35.646246;114.248467,35.645254;114.247485,35.643848;114.244803,35.639648;114.24189,35.635072;114.237835,35.628661;114.237577,35.628259;114.235839,35.625523;114.231188,35.618206;114.230856,35.617675;114.229863,35.616109;114.228426,35.613845;114.227766,35.612815;114.226902,35.611442;114.226725,35.611163;114.226537,35.610868;114.225872,35.609816;114.224284,35.607322;114.223876,35.606689;114.223286,35.605766;114.222696,35.604849;114.221457,35.603068;114.220991,35.60244;114.219955,35.601105;114.219167,35.60015;114.217772,35.598573;114.216581,35.597317;114.215755,35.596496;114.215041,35.595815;114.214918,35.595703;114.214371,35.595193;114.213866,35.594748;114.213427,35.594361;114.212799,35.593825;114.21193,35.593111;114.211061,35.592425;114.209344,35.591148;114.208336,35.59044;114.207354,35.589786;114.206356,35.589136;114.199222,35.584716;114.19854,35.584292;114.198181,35.584067;114.19691,35.58322;114.193621,35.581181;114.191894,35.580119;114.18573,35.576294;114.183332,35.574835;114.181567,35.57373;114.179191,35.572255;114.177678,35.571225;114.176455,35.570356;114.175039,35.569293;114.174245,35.568666;114.172748,35.567411;114.171885,35.566649;114.170925,35.565753;114.170034,35.564889;114.169921,35.564777;114.169122,35.563961;114.167985,35.562743;114.167261,35.56196;114.165211,35.559369;114.163956,35.557615;114.163543,35.557004;114.163028,35.556199;114.162631,35.555566;114.162373,35.555223;114.162025,35.554557;114.161816,35.554203;114.160335,35.551757;114.15989,35.551006;114.158554,35.548812;114.156945,35.546135;114.153715,35.540771;114.15106,35.536377;114.14908,35.533095;114.148195,35.531641;114.147949,35.531228;114.147096,35.529785;114.14635,35.528529;114.145749,35.527558;114.140476,35.518798;114.13708,35.513166;114.136147,35.51147;114.135675,35.510483;114.13523,35.50948;114.134725,35.508139;114.134618,35.507812;114.134436,35.507238;114.134216,35.506465;114.133948,35.505312;114.133711,35.503971;114.133668,35.503665;114.133604,35.503011;114.133535,35.502008;114.133502,35.500763;114.133513,35.499921;114.133577,35.498939;114.133658,35.498129;114.133786,35.497174;114.133846,35.496826;114.133931,35.496353;114.134162,35.495281;114.134457,35.494122;114.13486,35.492679;114.13686,35.485839;114.137134,35.484916;114.137526,35.483591;114.138384,35.480657;114.140084,35.474853;114.140916,35.47202;114.141629,35.469564;114.14194,35.468367;114.14216,35.467413;114.142278,35.466753;114.14245,35.465487;114.14252,35.464328;114.14252,35.463866;114.142509,35.462863;114.142477,35.462268;114.142407,35.461603;114.14223,35.460396;114.142107,35.459736;114.14193,35.459001;114.141678,35.458137;114.14142,35.45736;114.141141,35.456625;114.140707,35.455627;114.140422,35.455042;114.140122,35.454463;114.139484,35.453401;114.139146,35.45288;114.139006,35.452666;114.138663,35.452188;114.137703,35.450938;114.137215,35.450354;114.136383,35.449377;114.133331,35.445864;114.13118,35.443391;114.12994,35.44198;114.129865,35.441894;114.125976,35.43742;114.122832,35.43381;114.1203,35.430908;114.120129,35.430709;114.119807,35.430339;114.11948,35.429969;114.118965,35.429352;114.117119,35.427265;114.116524,35.426552;114.112667,35.422148;114.110736,35.419921;114.108102,35.41689;114.10793,35.416692;114.107758,35.416493;114.106852,35.415447;114.105291,35.413634;114.104239,35.412298;114.104003,35.411982;114.103376,35.411113;114.102335,35.409595;114.101906,35.408935;114.101359,35.408066;114.100726,35.407004;114.100173,35.406006;114.099653,35.404998;114.099224,35.404128;114.098676,35.402938;114.097909,35.40113;114.097292,35.399633;114.09659,35.397949;114.096016,35.396559;114.095763,35.395931;114.095243,35.394671;114.095007,35.394102;114.093838,35.391265;114.092427,35.387858;114.092062,35.386962;114.090533,35.383304;114.090083,35.382295;114.089707,35.381507;114.089144,35.38045;114.088817,35.379865;114.088382,35.379157;114.087905,35.378433;114.08746,35.377795;114.086687,35.376786;114.086113,35.376083;114.086016,35.375976;114.085571,35.375472;114.085088,35.374951;114.084546,35.374404;114.083855,35.373744;114.083238,35.373181;114.08269,35.372714;114.082031,35.372173;114.08158,35.371824;114.080373,35.370944;114.079622,35.370445;114.078951,35.370021;114.078077,35.369496;114.077466,35.369152;114.076532,35.368659;114.074156,35.367506;114.068711,35.36499;114.060058,35.36102;114.048745,35.355811;114.046824,35.354899;114.045831,35.3544;114.04507,35.354003;114.044153,35.353526;114.042286,35.352512;114.041401,35.352018;114.039609,35.350967;114.038085,35.35006;114.03794,35.349975;114.035677,35.348596;114.026412,35.343017;114.026262,35.342926;114.02586,35.34269;114.02528,35.342341;114.023955,35.341536;114.018516,35.338253;114.01791,35.337889;114.017652,35.337733;114.016515,35.337046;114.016113,35.336805;114.014755,35.335995;114.011505,35.334021;114.010931,35.333678;114.010684,35.333527;114.009734,35.332953;114.009595,35.332884;114.008206,35.332031;114.006494,35.330995;114.00606,35.330733;114.005008,35.3301;114.003962,35.329472;113.999644,35.326849;113.998641,35.326248;113.997725,35.325689";
        String[] polyArr=polyline.split(";");
        List<Coordinate> coordinates=new ArrayList<>();
        for(String poly:polyArr){
            String[] p1Arr=poly.split(",");
            Coordinate coordinate=new Coordinate(new BigDecimal(p1Arr[0]),new BigDecimal(p1Arr[1]));
            coordinates.add(coordinate);
        }
        if(!checkEle(coordinates)){
            System.out.println("异常");
            return;
        }

        //根据起始经纬度桩号调整起始位置
        boolean fixRes=fixInputCoordinates(coordinates,"K484+420");//起始桩号非百米桩，需要调整
        if(!fixRes){
            System.out.println("fix error");
            return;
        }
        System.out.println(coordinates.get(0).longitude+","+coordinates.get(0).latitude);

        //先用100作为基数计算点位
        List<Coordinate> coordinatesRes = new ArrayList<>(); //新的点位list
        List<Coordinate> coordinatesTmp=new ArrayList<>();
        coordinatesTmp.addAll(coordinates);
        Coordinate start = coordinates.get(0);
        double interval=100.0;
//            interval=100.168;
        calculateIntermediateCoordinates(coordinatesTmp, coordinatesRes, interval,interval);
        coordinatesRes.add(0, start);//追加头结点

        System.out.println(coordinatesRes.size());
        System.out.println("interval="+(interval));

        //excel里面桩号差是113106米,高德路径规划113159米
        //百米桩号数量计算出总里程
        double total = 113106-80;//为取第一个点偏移了80米
        int size=coordinatesRes.size()-1;
        double delta= (total-size*100
                -haversineDistance(coordinatesTmp.get(0), coordinatesRes.get(coordinatesRes.size() - 1)).setScale(2,RoundingMode.HALF_EVEN).doubleValue());
        System.out.println("规划出的百米桩里程和百米桩里程差="+delta);

        if(Math.abs(delta)>100){
            System.out.println("二次规划");
            interval=interval-delta/size;
            coordinatesRes = new ArrayList<>(); //新的点位list
            coordinatesTmp=new ArrayList<>();
            coordinatesTmp.addAll(coordinates);
            calculateIntermediateCoordinates(coordinatesTmp, coordinatesRes, interval,interval);
            coordinatesRes.add(0, start);//追加头结点

            System.out.println(coordinatesRes.size());
            System.out.println("interval="+(interval));

            //百米桩号数量计算出总里程
            size=coordinatesRes.size()-1;
            delta= (total-size*100
                    -haversineDistance(coordinatesTmp.get(0), coordinatesRes.get(coordinatesRes.size() - 1)).setScale(2,RoundingMode.HALF_EVEN).doubleValue());
            System.out.println("规划出的百米桩里程和百米桩里程差="+delta);
        }
    }

    //
    /**
     * 修正待获取百米桩号的原始路径点位列表的第一个点为百米桩经纬度点位.
     * @param coordinates 路径规划得到的经纬度点位列表，会被修改
     * @param fixDistance 待修正距离，比如coordinates中起始点位桩号是K484+280,即484.240KM,则应往后调整(100-484240%100)米即60米，
     *                    将第一个点位调整为桩号K484+300的经纬度*/
    public static boolean fixInputCoordinates(List<Coordinate> coordinates,double fixDistance){

        while(true) {
            if(coordinates.size()<2){
                System.out.println("coordinates.size()<2 || 或者整体路径距离太短未能满足调整起始点条件");
                return false;
            }

            Coordinate prevCoord = coordinates.get(0);
            Coordinate currentCoord = coordinates.get(01);
            BigDecimal distance = haversineDistance(prevCoord, currentCoord);


            if (Math.abs(distance.doubleValue() - fixDistance) < 0.01) {
                coordinates.remove(0);
                return true;
            } else if (distance.doubleValue() > fixDistance) {//前两个点之间的距离大于需要调整的距离
                BigDecimal ratio = BigDecimal.valueOf(fixDistance).divide(distance, 10, RoundingMode.HALF_EVEN);
                BigDecimal newLongitude = prevCoord.longitude.add(currentCoord.longitude.subtract(prevCoord.longitude).multiply(ratio));
                BigDecimal newLatitude = prevCoord.latitude.add(currentCoord.latitude.subtract(prevCoord.latitude).multiply(ratio));

                //生成一个新的点加入到
                Coordinate newCoordinate = new Coordinate(newLongitude, newLatitude);
                coordinates.set(0, newCoordinate);
                return true;
            } else {//找到下一个点
                coordinates.remove(0);
                //重新计算，然后跳出
                fixDistance = fixDistance - distance.doubleValue();
                continue;
            }
        }
    }

    /**
     * 修正待获取百米桩号的原始路径点位列表的第一个点为百米桩经纬度点位.
     * @param coordinates 路径规划得到的经纬度点位列表，会被修改
     * @param startPileno 待修正距离，比如coordinates中起始点位桩号是K484+280,即484.240KM,则应往后调整(100-484240%100)米即60米，
     *                    将第一个点位调整为桩号K484+300的经纬度*/
    public static boolean fixInputCoordinates(List<Coordinate> coordinates,String startPileno){
        String regex = "^[0-9][0-9.]+$";
        startPileno=startPileno.replace("k","");
        startPileno=startPileno.replace("K","");
        startPileno=startPileno.replace("+",".");
        if(!startPileno.matches(regex)){
            System.out.println("桩号输入有误"+startPileno);
            return false;
        }
        System.out.println("startPileno="+startPileno);
        double startPilenoD=Double.valueOf(startPileno)*1000;
        int fixDistance=100-(int)(startPilenoD%100.00);
        System.out.println(fixDistance);
        return fixInputCoordinates(coordinates,fixDistance);
    }

    //检查坐标点数据合法性
    public  static boolean checkEle(List<Coordinate> input){
        for(Coordinate coordinate:input){
            if(coordinate.longitude.compareTo(new BigDecimal("140"))>0||
                    coordinate.longitude.compareTo(new BigDecimal("70"))<0||
                            coordinate.latitude.compareTo(new BigDecimal("0"))<0||
                    coordinate.latitude.compareTo(new BigDecimal("60"))>0){
                System.out.println("存在异常"+coordinate.longitude+" "+coordinate.latitude);
                return false;
            }
        }
        return true;
    }
}
